# 縦 H 行、横 W 列のグリッドがあります。 
# 上から i 行目、左から j 列目のマスを (i,j)で表します。
# 各 i,j(1≤i≤H, 1≤j≤W) について、マス (i,j) の情報が文字 ai,j によって与えられます。
# ai,j が . ならばマス (i,j) は空マスであり、ai,j が # ならばマス (i,j) は壁のマスです。
# マス (1,1) および (H,W)は空マスであることが保証されています
# 太郎君は、マス (1,1)から出発し、右または下に隣り合う空マスへの移動を繰り返すことで、
# マス (H,W)まで辿り着こうとしています。
# マス (1,1)から (H,W) までの太郎君の経路は何通りでしょうか？ 
# 答えは非常に大きくなりうるので、10^9+7で割った余りを求めてください。
# Hおよび Wは整数である。
# 2≤H,W≤1000
# ai,j は . または # である。
# マス (1,1) および (H,W) は空マスである。
# dp[i][j] (i,j)に到着するまでの移動方法の合計
# dp[i][j] = dp[i-1][j] + dp[i][j-1] 

def solve(H,W,G):

    dp = [[0]*(W+1) for i in range(H+1)]
    print(H,W)
    for i in range(1,H+1):
        for j in range(1,W+1):
            if i == 1 and j == 1:
                dp[i][j] = 1
            else:
                if G[i-1][j-1] == ".":
                    dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % 1000000007
                elif G[i-1][j-1] == "#":
                    dp[i][j] = 0
    print(dp[H][W])
    

G = [
    [".",".",".","#"],
    [".","#",".","."],
    [".",".",".","."]]

G = [
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."],
[".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","."]
]
H = len(G)
W = len(G[0])

solve(H,W,G)
# N 個の品物があります。
# 品物には 1,2,…,N と番号が振られています。 
# 各 i (1≤i≤N) について、品物 i の重さは wi で、価値は viです。
# 太郎君は、N個の品物のうちいくつかを選び、ナップサックに入れて持ち帰ることにしました。
#  ナップサックの容量は W であり、持ち帰る品物の重さの総和は W以下でなければなりません。
# 太郎君が持ち帰る品物の価値の総和の最大値を求めてください。
# 制約
# 入力はすべて整数である。
# 1≤N≤100
# 1≤W≤10^5
# 1≤wi≤W
# 1≤vi≤10^9

# dp[i][w] 前からi 個詰めるときの重さがwを超えない価値の最大値
# をやろうとしたけど更新したほうが早かったので今回は更新した
# dp[w] 重さがwを超えない価値の最大値をNの間で更新した
# dp[w]  = max(befdp[w-wv[i-1][0]] + wv[i-1][1],befdp[w]) befdpは一つ前のiでのdp

def solve(N,W,wv):
    dp  = [0]*(W+1)
    befdp =  [0]*(W+1)
    # print(dp)

    for i in range(1,N+1):
        for w in range(wv[i-1][0],W+1):
            dp[w]  = max(befdp[w-wv[i-1][0]] + wv[i-1][1],befdp[w])
        print(dp)
        befdp  = dp.copy()
    print(dp[W])

W = 15
# wv = [[3,30],
#       [4,50],
#       [5,60]]

wv =[[6,5],
    [5,6],
    [6,4],
    [6,6],
    [3,5],
    [7,2]]

N = len(wv)

solve(N,W,wv)

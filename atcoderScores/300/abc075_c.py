# 問題文

# 自己ループと二重辺を含まない N頂点 M 辺の無向連結グラフが与えられます。
# i(1≦i≦M) 番目の辺は頂点 ai と頂点 biを結びます。

# グラフから辺を取り除いたとき、グラフ全体が非連結になるような辺のことを橋と呼びます。
# 与えられた M本のうち橋である辺の本数を求めてください。
# ノート
# 自己ループ とは、ai=bi(1≦i≦M)であるような辺 i のことをいいます。
# 二重辺 とは、ai=aj かつ bi=bj(1≦i<j≦M) であるような辺の組 i,jのことをいいます。
# 無向グラフが 連結 であるとは、グラフの任意の二頂点間に経路が存在することをいいます。

# 制約
# 2≦N≦50
# N−1≦M≦min(N(N−1)/2,50)
# 1≦ai<bi≦N
# 与えられるグラフは自己ループと二重辺を含まない。
# 与えられるグラフは連結である。

# 7 7
# 1 3
# 2 7
# 3 4
# 4 5
# 4 6
# 5 6
# 6 7

# 4

# 辺を一本ずつ取り除いてそれが連結かを調べる
#深さ優先探索ですべての点に到達できるかを調べる
def isconnect(i):# iは現在地点
    global g,node
    node[i]  = 1
    for j in range(1,N+1):
        if g[i][j] == 1 and node[j] == 0:
            isconnect(j)

N,M =map(int,input().split(" "))
g = [[0]*(N+1) for i in range(N+1)]
a = []
count = 0
for i in range(M):
    x,y = map(int,input().split(" "))
    g[x][y] = 1
    g[y][x] = 1
    a.append([x,y])

for i in a:
    g[i[0]][i[1]] = 0
    g[i[1]][i[0]] = 0
    node = [0]*(N+1)
    isconnect(1)
    if node.count(0)==1:
        count+=1
    g[i[0]][i[1]] = 1
    g[i[1]][i[0]] = 1
print(M-count)

#大体はわかった気がしたけどなんか上手く行かない
# AC 解答見た
# やりたい方針は合ってた
#ということで後は実装力の問題
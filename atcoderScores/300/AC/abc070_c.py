# 問題文

# N台の時計があり、i(1≦i≦N) 番目の時計の針はちょうど Ti 秒で時計盤を1 周します。
# 最初、全ての時計の針は真っ直ぐ上に向いており、止まっています。
# イルカは、全ての時計の針を同時に動かし始めました。
# 再び、全ての時計の針が真っ直ぐ上に向くのは何秒後でしょうか?
# 制約
# 1≦N≦100
# 1≦Ti≦10^18
# 入力は全て整数である。
# 答えは 10^18 秒以内である。
# N
# T1
# :
# TN

# 2
# 2
# 3

# 6

# 二回目
# N個の数字の最小公倍数を求めろと言っている。
# ユークリッドの互除法を実装しろと言っている？
def eu(a,b): #aとbの最小公倍数
    if a % b == 0: #割ったあまりが0
        return b
    else:
        return eu(b, a%b)
        
N = int(input())
ans = int(input())
for item in range(N-1):
    a = int(input())
    ans = (ans * a) // eu(ans,a)
print(ans)

# N = 1 のコーナーケースを考える必要があった。
# 不用意にN = 2を用意しないことが大事

# 1回目
# なんやかんや言ってるけど結局やることは
# すべての数の最小公倍数を求めろ
# 最初に思いついたのは10^18の間でループを回して
# 最初にすべてが割り切れればいい

# なんでTiでループを回そうとしたんだ
# わからん

# 全く思いつかない
# AC 10　解答見た
# Nを正の奇数とします。
# N枚のコインがあります。
# コインには 1,2,…,N と番号が振られています。
# 各 i (1≤i≤N) について、コイン i を投げると、確率 pi で表が出て、確率 1−piで裏が出ます。
# 太郎君は N枚のコインをすべて投げました。
# このとき、表の個数が裏の個数を上回る確率を求めてください。
# Nは奇数である。
# 1≤N≤2999
# piは実数であり、小数第 2位まで与えられる。
# 0<pi<1

# dp[i][j] i枚投げ終わったときにj枚が表になっている確率
# dp[i][j] = dp[i-1][j-1] * p[i-1] + dp[i-1][j] * (1-p[i-1])
# 投げた回数と表の回数が多分ごっちゃになってる

def solve(p,N):
    dp = [[0]*(N+1) for i in range(N+1)]
    dp[0][0] = 1 
    for i in range(1,N+1):
        dp[i][0] = dp[i-1][0] * (1-p[i-1])

    for i in range(1,N+1):
        for j in range(1,N+1):
            if i < j:
                dp[i][j] = 0
            else:
                dp[i][j] = dp[i-1][j-1] * p[i-1] + dp[i-1][j] * (1-p[i-1])
                
    print(sum(dp[N][int(N/2)+1:N+1]))

# p = [0.30,0.60,0.8]
p = [0.42,0.01,0.42,0.99,0.42]
N = len(p)

solve(p,N)

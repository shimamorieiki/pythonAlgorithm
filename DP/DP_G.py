# N 頂点 M 辺の有向グラフ G があります。
# 頂点には 1,2,…,N と番号が振られています。
# 各 i (1≤i≤M) について、i 番目の有向辺は頂点 xi から yi へ張られています。
# Gは有向閉路を含みません。
# Gの有向パスのうち、最長のものの長さを求めてください。
# ただし、有向パスの長さとは、有向パスに含まれる辺の本数のことです。
# 入力はすべて整数である。
# 2≤N≤10^5
# 1≤M≤10^5
# 1≤xi,yi≤N
# ペア (xi,yi)はすべて相異なる。
# Gは有向閉路を含まない。

# dp[e] 前からi本目の辺を処理し終わった後の e に入ってくる最長経路
# g = G[i]
# dp[g[1]] = max(dp[g[0]] + 1,dp[g[1]]) 
# g[0]からg[1]に向かうので dp[g[1]]はそこまでの最長+1 か現在の最長のうち長い方

def solve(N,M,G):
    dp = [0]*(N+1)
    for g in G:
        dp[g[1]] = max(dp[g[0]] + 1,dp[g[1]])
        # print(dp)
    print(max(dp))

# N = 4
# M = 5
# G = [[1,2],
#     [1,3],
#     [3,2],
#     [2,4],
#     [3,4]]

N = 5
G=[ [5,3],
    [2,3],
    [2,4],
    [5,2],
    [5,1],
    [1,4],
    [4,3],
    [1,3]]
M = len(G)

solve(N,M,G)